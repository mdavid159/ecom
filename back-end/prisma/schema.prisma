// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  name         String
  passwordHash String
  isVerified   Boolean    @default(false)
  isLoggedIn   Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  cart         CartItem[]
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  email     String
  tokenHash String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model ForgotPassToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String
  description      String
  price            Float
  imageUrl         String[]
  stock            Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  category         String
  ByUser           String
  viewsPerDay      Int      @default(0)
  viewsPerWeek     Int      @default(0)
  viewsPerMonth    Int      @default(0)
  lastViewsResetAt DateTime @default(now())
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  name      String
  price     Float
  userId    String
  productId Int
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
